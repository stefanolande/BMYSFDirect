import socket
import string
from datetime import datetime

from ysf import ysfpayload, ysffich
from ysf.ysffich import DT


def now():
    dt = datetime.now()
    return datetime.timestamp(dt)


def pad(data: bytes, length: int) -> bytes:
    padding_length = length - len(data)
    return data + b'\x20' * padding_length


def validate_dg_id_map(dgid_to_tg_map: dict) -> bool:
    # checks that a TG appears only one
    return len(set(dgid_to_tg_map.values())) == len(dgid_to_tg_map)


def close_socket(sock):
    try:
        sock.shutdown(socket.SHUT_RD)
    except OSError as e:
        pass
    sock.close()


def consume_tail(sock):
    sock.settimeout(0.11)
    for i in range(5):
        try:
            sock.recvfrom(1024)
        except TimeoutError:
            pass
        except socket.timeout:
            pass
    sock.setblocking(True)


def send_tg_change_tx(callsign, tg: int, sock, client_addr):
    payloads = [
        b'\x00\xd4q\xc9cM\x11m8\xdc\xec"\x01\xff0\x0e\xd0r\x82x\xec`3\x00\x86q}\\ \xa6o\xf3\xed\xc3\x08\x10S\x1b\xdd \xfb#S\x08\x1c\xa3_= \xbf\xa5\xf5\x83\xd2\x99&\xe1|\xb6.\xfa\xb3\xd2\x9b6D\xbc\xdd\xae,\xff\xf3\xfd\x14\x9c\x8b\xdd\xa8\xfd\xdf\xb3\xfd\x19\xddvY\xaf\x07>[\x8dI\x93\x8f\x19\xaf\x0b\x15%\rI\x96(\x04]\x165W\xf7\xed\x01\x8f\x13]\x16\x0e@U\xad\x01\xaf',
        b"\x02\xd4q\xc9cM!\x9d85\x93\xe1\x91\xffG\xf0\x91\x82\x81|v,\xf3\x02\x18Z\xf7\x9c S'\xe7{\xe2\x91\x02{\xbb\x04\xe9\xb6\xf4\xb29<\x1cU[\x11HS\x95_\x93{\x98` .(\xe6d\xf3{\x11\x1ds\xa9\xf0p}\xa4]\xff\x04\xe8\x85\xd4\xa6t\xe2\x7fU\x1eU\x18\xfb/~LY\xb3\x9da>8\xe2(hY\x00X74\xdf\xfe\xf9\xb8Y\x90\xbc\xed\xc9L\xa39>?E\x0eE",
        b'\x04\xd4q\xc9cM!\x8d@\xa40\xe1\x82\xf02x\x91\xa0\x10\xec\x88,\xc3\xf0|\xac\xf7_\x83\x07p\xf9\xe8\xefnmH\x88a0\x05\xd4\xb28k~v,g\x8aDZ\x06\x08Y\xbb\x15ds\xa2\xd4|{\x7fU[\x15\x0c\xf55t\x9dY\xbb\x04dP\xc4\xb6lkk\x00\x0eU\x1e\xf7\x07\xe0w{\x994db\xf4\xa6N\x1c\x08#x3\xf4aQ\xd9\xc8H\xaa\x07FA\x90\xe2(>?g,w',
        b'\x06\xd4q\xc9cM m8Dh\xed\x81\xff\xe7\x98\x9b\xf2\x82\xe4T/\xf3\x03\xfb\xc8\xf9\\!8<\xf9\xe8\xefnm\xd12\x8c\xed\xd1\xc6\x94F\xd0\xc5\xf7-g\x8aDZ\x06\x08Y\xba\x14dc\xb2\xd08zoD\x1eU\x0c\xf55t\x9d{\xba\x05eQ\xc4\xa6^HH\x10H3\x1e\xf7\x07\xe0w\xc0#\x9cp\x0c\n\xc4OKn\x7f\xb4w\xf4aQ\xd9\xc8{\x986GP\x92\xd18kk"h#',
        b'\x08\xd4q\xc9cM }@\xd5\xcb\xed\x92\xf0\x92\x10\x9b\xd0\x13t\xaa/\xc3\xf1\x9f>\xf9\x9f\x82lk\xf9\xe8\xefnmY\x984eX\\\xb6|,\x18\x00\x0cw\x8aDZ\x06\x08Y\x99%tX\\\xb2\n\x0e.g>E\x0c\xf55t\x9d?\xffB\x8a\x85\x80\xf29,\x80\xa2j\x99\x1e\xf7\x07\xe0w\xf3;\x05\xf8\x9c^\x95V\xc3\xf6\xc5\x0cs\xf4aQ\xd9\xc8j\xab\x06Gr\xe6\x95}/*#,s',
        b'\n\xd4q\xc9cM,M8=\xf9\xe7\xe1\xfc\xe7\xd2\x98\x02\x80s\xe7!\xb3\x03\x03@\xfe\x9c"\x94\xc4\xf8\x93cnN{\x994d@\xc4\xb3\x1b\x0c\t\x00\x1eQj,\xfa\x06\xe8{\x90\xfb\x12\x1cL\xb6l<\x182h3\x97y\x15t\xd5j\xa2\x8e\xcb\x85\xd4\xa6^\x0f>D\x0f@?\x01\x17\xe0\xe7Y\x985eQ\x82\xc09>+\x00\x0cg\xdc@\xf1\xd9,{\xbb\x06Fb\xf4\xb2\x0bYMw-c',
        b'\x0c\xd4q\xc9cM,]@\xacZ\xe7\xf2\xf3\x92Z\x98 \x11\xe3\x19!\x83\xf1g\xb6\xfe_\x81\xc0\x93\xf8\x93b\x91\xffj\xaa\x07FP\xd6\x94O\x1c\x08\x01\x1csj,\x15_\xcd{\x98$tr\xf4\xb7m.;3/A\x97y\xb0}\xc5{\x984eA\xc4\xb3\n\r\t\x00\x0f@?\x01/~\x1ej\xab\x04tA\x90\xe38jovx#\xdc@\xfe\xf9\xc3{\x986Gr\xe4\xb6N\x0c\x18\x01\x1eA',
        b'\x0e\xd4q\xc9cM-\xbd8L\x02\xeb\xf1\xfcG\xba\x92r\x83\xeb\xc5"\xb3\x02\xe0\xd2\xf0\\#\xff\xdf\xdd8\x8f#\x9c{\x99\'F@\x90\xf2\x1a\r\t\x11\x1cs\xb7\xe78\xb7\xb9H\x884uP\x92\xd09./v=g&|\xbd\xa6YY\x98$ec\xe4\xb2\x1bXLDH7\x1d\xd3\x99\xf3\xc6{\xbb\x17Fs\xb0\xe7liX3<s\x11$\xbf\xf5;{\x98&GP\xc4\xb6|>:\x11\x0fA',
        b"\x10\xd4q\xc9cM!\x9d85\x93\xe1\x91\xffG\xf0\x91\x82\x81|v,\xf3\x02\x18Z\xf7\x9c S'\xe7{\xe2\x91\x02Y\x984ts\xe4\xb6_\x1c\x08\x01\x1eUHS\x95_\x93Y\x98$t@\x80\xf28>>T\x0cw\xa9\xf0p}\xa4H\x887Gr\xb0\xf3(xLE\rg\x18\xfb/~LY\x994dr\xb0\xf3).;\x00\x0fD4\xdf\xfe\xf9\xb8j\xab\x06Gr\xb0\xf3\x0bXLg<s",
        b'\x12\xd4q\xc9cM!\x8d@\xa40\xe1\x82\xf02x\x91\xa0\x10\xec\x88,\xc3\xf0|\xac\xf7_\x83\x07p\xf9\xe8\xefnm{\x98\'FA\x80\xf7}.:3h3\x8aDZ\x06\x08Y\x99&Gr\xa0\xf6mxH".U\x0c\xf55t\x9dj\xaa\x15dr\xa0\xf3({{\x00Y3\x1e\xf7\x07\xe0w{\xbb\x15tP\xd4\xb3\x0b\x0c\x1dg?Q\xf4aQ\xd9\xc8Y\xba\x17F@\xd6\x94}{nU\x1dg',
        b'\x14\xd4q\xc9cM m8Dh\xed\x81\xff\xe7\x98\x9b\xf2\x82\xe4T/\xf3\x03\xfb\xc8\xf9\\!8<\xf9\xe8\xefnmY\xba\x04ts\xa0\xf3(yMT\x1dw\x8aDZ\x06\x08{\xba\x06FA\x92\xd1\n\x0f/E\x1eQ\x0c\xf55t\x9d{\xba\x07Gr\xa0\xf28{~v<s\x1e\xf7\x07\xe0wj\xab\x15t@\xd4\xb7N\x1d\t\x00\x1cs\xf4aQ\xd9\xc8Y\x997Fc\xb0\xe3(>>T\x0eU',
        b'\x16\xd4q\xc9cM }@\xd5\xcb\xed\x92\xf0\x92\x10\x9b\xd0\x13t\xaa/\xc3\xf1\x9f>\xf9\x9f\x82lk\xf9\xe8\xefnmj\x88$eP\xc4\xb7l-\x18\x00\x1ds\x8aDZ\x06\x08{\xbb\x15dA\xd6\x95OK{\x00[\x11\x0c\xf55t\x9d{\x98$dr\xf4\xb2\x0b\r\x0cUH#\x1e\xf7\x07\xe0w{\xbb\x07Fc\xb0\xf6m{z".Q\xf4aQ\xd9\xc8j\xaa\x04dP\xc4\xb6}xY\x01X3',
        b'\x18\xd4q\xc9cM,M8=\xf9\xe7\xe1\xfc\xe7\xd2\x98\x02\x80s\xe7!\xb3\x03\x03@\xfe\x9c"\x94\xc4\xf8\x93cnN{\x987F@\xd6\x90(.+3=cj,\xfa\x06\xe8Y\xbb\x16WA\x80\xe7NHMU\x0fE\x97y\x15t\xd5{\xbb\x04tb\xf6\x95l{j\x00\rs?\x01\x17\xe0\xe7H\x88$dQ\x92\xd1(/:\x11\x0eU\xdc@\xf1\xd9,{\xba\x07Fj(\xf2){~DH3',
        b"\x1a\xd4q\xc9cM,]@\xacZ\xe7\xf2\xf3\x92Z\x98 \x11\xe3\x19!\x83\xf1g\xb6\xfe_\x81\xc0\x93\xf8\x93b\x91\xffH\xab\x04dc\xe4\xb7^I\\g,gj,\x15_\xcdY\x994eP\x92\xc08knTJ\x05\x97y\xb0}\xc5Y\x98$us\xb0\xf2\x0b\x0c\x18\x11H'?\x01/~\x1eY\x994eA\x80\xf2\x0b\x1c\x08\x00\x0fE\xdc@\xfe\xf9\xc3{\xbb\x07GQ\x90\xf28zz\x00\x0fA",
        b'\x1c\xd4q\xc9cM-\xbd8L\x02\xeb\xf1\xfcG\xba\x92r\x83\xeb\xc5"\xb3\x02\xe0\xd2\xf0\\#\xff\xdf\xdd8\x8f#\x9cY\x90\xaf\xcf\xf2\xb0\xf3)/>g,w\xb7\xe78\xb7\xb9j\xa2\x9c\xed\xd0\xc4\xb3),\x1dw<s&|\xbd\xa6YH\x88$ds\xa0\xf28.>D\x1cw\x1d\xd3\x99\xf3\xc6Y\x98$u@\xd4\xb6|<\x08"<w\x11$\xbf\xf5;Y\x997Gs\xb2\xd4^Kk\x01\x0fE',
        b'\x1f\xd4q\xc9cM\xd2\xcd8\x00\x13c\xe1\xfc\x00\x95\x9cB\x80\x0e\xc5\xeas\x00\x07:\xbe\x9c \x0b\x9f\xf3\xed\xc3\x08\x10S\x1b\xdd \xfb#S\x08\x1c\xa3_= \xbf\xa5\xf5\x83\xd2\x99&\xe1|\xb6.\xfa\xb3\xd2\x9b6D\xbc\xdd\xae,\xff\xf3\xfd\x14\x9c\x8b\xdd\xa8\xfd\xdf\xb3\xfd\x19\xddvY\xaf\x07>[\x8dI\x93\x8f\x19\xaf\x0b\x15%\rI\x96(\x04]\x165W\xf7\xed\x01\x8f\x13]\x16\x0e@U\xad\x01\xaf'
    ]

    encoded_call = pad(callsign.encode(), 10)
    messages = ["YSFD".encode() + encoded_call + encoded_call + pad("ALL".encode(), 10) + d for d in payloads]
    src = f"TG{tg}".ljust(10).encode()

    for i in range(0, len(messages)):
        data = messages[i]
        ysffich.decode(data[40:])
        fn = ysffich.getFN()
        dt = ysffich.getDT()

        if fn == 1 and dt == DT.VD2:
            payload = bytearray(data[35:])
            ysfpayload.writeVDMmode2Data(payload, src)
            messages[i] = data[:35] + payload

        sock.sendto(messages[i], client_addr)
