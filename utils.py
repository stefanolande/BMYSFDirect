import socket
import string
from datetime import datetime

from ysf import ysfpayload, ysffich
from ysf.ysffich import DT


def now():
    dt = datetime.now()
    return datetime.timestamp(dt)


def pad(data: bytes, length: int) -> bytes:
    padding_length = length - len(data)
    return data + b'\x20' * padding_length


def validate_dg_id_map(dgid_to_tg_map: dict) -> bool:
    # checks that a TG appears only one
    return len(set(dgid_to_tg_map.values())) == len(dgid_to_tg_map)


def close_socket(sock):
    try:
        sock.shutdown(socket.SHUT_RD)
    except OSError as e:
        pass
    sock.close()


def consume_tail(sock):
    sock.settimeout(0.11)
    for i in range(5):
        try:
            sock.recvfrom(1024)
        except TimeoutError:
            pass
        except socket.timeout:
            pass
    sock.setblocking(True)


def send_tg_change_tx(callsign, tg: int, sock, client_addr):
    payloads = [
        b'\x00\xd4q\xc9cM\x11}G\x85\x08"\x12\xf8yY\xd0P\x12Fe`\x03\xfc\x86\xe2}\x9f\xb2\xa8\xe7\xf3\xf8\xf3\x08\x1eS\x11\x8d \xdf#c\xc0\x17`\x7f\x1c\x88\xb4\xa5\xe0s\xd2\x9b&\xff\xbc\xb9\xa8Z\xbaF\x92\x10\x14\xbe\xdd\xac,\xd3s\xfd\x1b\x9cuu\xa8\xf7\x7f\xb8\x11\x10\xf2\xc6Y\xaf\x0b>\xe8\x8dI\x9f\x8f=\xef\x0e\x84%\x1eI\x94d%\x9d\x16=W\x0e-\x01\x87\x13s\xf6\r\xfb\xd5\x89\x01\x93',
        b'\x00\xd4q\xc9cM!\x8dGlw\xe1\x82\xf8\x0e\xa7\x91\xa0\x11B\xff,\xc3\xfe\x18\xc9\xf7_\xb2]\xaf\xf9\xe8\xefnmY\xba\x04es\xf6\x95m>;w-w\x8aDZ\x06\x08j\xa3\x8d\xec\xd0\xd4\xb39{~EJ\x01\x0c\xf55t\x9d\x19\x90\xbceX\x1a\xd0(??v)7\x1e\xf7\x07\xe0w{\x98$eQ\xd4\xb2\x1a\x0c\t\x00\x0c3\xf4aQ\xd9\xc8Y\x994tr\xe4\xb6|{z\x00Z\x05',
        b'\x02\xd4q\xc9cM m?\x8c/\xed\x81\xf7\xdbG\x9b\xf2\x83J#/\xf3\r\x9f\xad\xf9\\\x10b\xe3\xf9\xe8\xefnmj\x884uA\x90\xf29,\x08#h#\x8aDZ\x06\x08{\xbb\x04eQ\xc4\xb2\x1a\x0c\x0cT\x0e@\x0c\xf55t\x9dY\x997Gb\xf4\xa6|zk"<w\x1e\xf7\x07\xe0w{\x994dX\x08\xf2\n\x0c\x19\x10J\x11\xf4aQ\xd9\xc8j\xab\x04tH^\x94l/;#<s',
        b'\x04\xd4q\xc9cM }G\x1d\x8c\xed\x92\xf8\xae\xcf\x9b\xd0\x12\xda\xdd/\xc3\xff\xfb[\xf9\x9f\xb36\xb4\xf9\xe8\xefnm{\xbb\x04eP\xc6\x919k~EZ\x11\x8aDZ\x06\x08H\x88$er\xe4\xb7O\x1d\x0cg-w\x0c\xf55t\x9d{\x98&F@\xd4\xa39.;\x01\x0eP\x1e\xf7\x07\xe0w{\xb2\x8cq\x1d^\x90\n\x1f/U\x1ds\xf4aQ\xd9\xc8Y\xb3\x9c`\x1d\x08\xf2(.?f>U',
        b'\x06\xd4q\xc9cM,M?\xf5\xbe\xe7\xe1\xf4\xdb\r\x98\x02\x81\xdd\x90!\xb3\rg%\xfe\x9c\x13\xce\x1b\xf8\x93cnNY\x91\xbctj|\xb2(<\rE\x0fUj,\xfa\x06\xe8j\x896Gb\xa0\xf6mxI\x01Y3\x97y\x15t\xd5{\x90\xacp\x1d\x18\xf3\x1a\x0c\x082=c?\x01\x17\xe0\xe7Y\xb2\x9eGX\\\xb7|k~E\x0eU\xdc@\xf1\xd9,{\xb3\x8ctjn\x90(?.T\x0cs',
        b'\x08\xd4q\xc9cM,]Gd\x1d\xe7\xf2\xfb\xae\x85\x98 \x10Mn!\x83\xff\x03\xd3\xfe_\xb0\x9aL\xf8\x93b\x91\xff{\xb2\x9fVX\x18\xf2\nXMvx3j,\x15_\xcdj\x80\xaeFk(\xe6l,\x08#,c\x97y\xb0}\xc5Y\x91\xbdu{l\xb2(??E\x1eU?\x01/~\x1e{\xb2\x9ceX^\x90\n\x1e?f,s\xdc@\xfe\xf9\xc3j\xa2\x8cdk(\xf2(i\\vx3',
        b'\n\xd4q\xc9cM-\xbd?\x84E\xeb\xf1\xf4{e\x92r\x82E\xb2"\xb3\x0c\x84\xb7\xf0\\\x12\xa5\x00\xdd8\x87#\xb5{\xb3\x9deXL\xb2(k\x7fDK\x11W\xe75\xb7\xba{\x90\xad\xfc\xe3\xf4\xb2\n\x0e*3x#f|\xba\xa6g{\x98&V@\x90\xf6}<\x19\x01\x1eQ\x8d\xd3\x91\xf3\xe4j\xaa\x15er\xe4\xb7NHH2x#!$\x8b\xf5\xd8Y\xba\x15tc\xf4\xb6|hLw.E',
        b'\x0c\xd4q\xc9cM!\x9d?\xfd\xd4\xe1\x91\xf7{/\x91\x82\x80\xd2\x01,\xf3\x0c|?\xf7\x9c\x11\t\xf8\xe7{\xe2\x91\x02j\xab\x06GP\x80\xf28{{\x00\x0ccHS\x95_\x93{\x90\xaf\xde\xc8\x18\xf3\x1b\x1c\x1cEX3\xa9\xf0p}\xa4{\xbb\x14db\xe4\xb6ljz\x00\x1fQ\x18\xfb/~Lj\xab\x04ds\xe4\xb28,\rw,s4\xdf\xfe\xf9\xb8{\x98&G@\x90\xf28<\x08#?Q',
        b'\x0e\xd4q\xc9cM!\x8dGlw\xe1\x82\xf8\x0e\xa7\x91\xa0\x11B\xff,\xc3\xfe\x18\xc9\xf7_\xb2]\xaf\xf9\xe8\xefnmj\xa3\x8c\xec\xf3\xf4\xb7OZ{\x01X3\x8aDZ\x06\x08Y\x90\xaddIN\x90(=\x0cg<w\x0c\xf55t\x9d{\xb3\x9eGI\x08\xf6NHH\x11\x0cs\x1e\xf7\x07\xe0w{\xb2\x8fVIL\xb6NXLvh3\xf4aQ\xd9\xc8{\x91\xbdtz|\xb2(/*\x10\x0eQ',
        b'\x10\xd4q\xc9cM m?\x8c/\xed\x81\xf7\xdbG\x9b\xf2\x83J#/\xf3\r\x9f\xad\xf9\\\x10b\xe3\xf9\xe8\xefnmj\xa2\x9dtIL\xb2\n\x0c\x0cE\x1eQ\x8aDZ\x06\x08{\xb3\x9eFz8\xf2(h]UH3\x0c\xf55t\x9dH\x80\xbfWI\n\xd4NXH2-w\x1e\xf7\x07\xe0wY\x91\xbcez8\xf2(..E\x0fU\xf4aQ\xd9\xc8{\xb2\x8fVH\x08\xe2\nHY\x00\x0eQ',
        b'\x12\xd4q\xc9cM }G\x1d\x8c\xed\x92\xf8\xae\xcf\x9b\xd0\x12\xda\xdd/\xc3\xff\xfb[\xf9\x9f\xb36\xb4\xf9\xe8\xefnmY\xb2\x8ceX\n\xd0\nJ~g<w\x8aDZ\x06\x08Y\x91\xbddj|\xa6l/>U\x1eU\x0c\xf55t\x9dY\x91\xbdtz(\xf2\n\x1c\rD[\x15\x1e\xf7\x07\xe0wY\x99&FP\x90\xf6|.+\x10\x1cw\xf4aQ\xd9\xc8j\xaa\x17Gk(\xf2\n\x1c\t\x11\x0cs',
        b'\x14\xd4q\xc9cM,M?\xf5\xbe\xe7\xe1\xf4\xdb\r\x98\x02\x81\xdd\x90!\xb3\rg%\xfe\x9c\x13\xce\x1b\xf8\x93cnN{\x98&GX\x18\xf38hH"h#j,\xfa\x06\xe8H\xab\x07Fj*\xc18z~E\x1dw\x97y\x15t\xd5\xf33\x8cp\x0c^\x84_[z\x11\x1eP?\x01\x17\xe0\xe7j\x886FQ\x90\xf38,\x083,s\xdc@\xf1\xd9,{\x98&Fb\xe4\xb7|/;\x00\x0eQ',
        b'\x16\xd4q\xc9cM,]Gd\x1d\xe7\xf2\xfb\xae\x85\x98 \x10Mn!\x83\xff\x03\xd3\xfe_\xb0\x9aL\xf8\x93b\x91\xffY\xbb\x04dr\xe4\xb7NIMU\x1eUj,\x15_\xcdj\xab\x17GI\x18\xf6mjj#x#\x97y\xb0}\xc5j\xaa\x17FP\x92\xd4^K{\x01\x1cs?\x01/~\x1e{\x98$ts\xe4\xb28=\x0cvh"\xdc@\xfe\xf9\xc3{\x994e@\x92\xd08{j"k\x01',
        b'\x18\xd4q\xc9cM-\xbd?\x84E\xeb\xf1\xf4{e\x92r\x82E\xb2"\xb3\x0c\x84\xb7\xf0\\\x12\xa5\x00\xdd8\x87#\xb5Y\xba\x15dA\xc6\x94mz~vh\'W\xe75\xb7\xbaH\x88$tr\xe4\xb6|kj\x01\x1dwf|\xba\xa6g{\xba\x14tQ\x90\xf3\nHLwx3\x8d\xd3\x91\xf3\xe4H\x894tr\xf4\xb2\x1a\x1c\x0cf<w!$\x8b\xf5\xd8{\xba\x04dA\xc6\x908?>D\x1eQ',
        b'\x1a\xd4q\xc9cM!\x9d?\xfd\xd4\xe1\x91\xf7{/\x91\x82\x80\xd2\x01,\xf3\x0c|?\xf7\x9c\x11\t\xf8\xe7{\xe2\x91\x02{\x987VA\x80\xf2)?>UH3HS\x95_\x93j\x885dA\x92\xd0\x0bXH\x00Y#\xa9\xf0p}\xa4{\xba\x06Fb\xb0\xe2\x1aJz\x11\x1cs\x18\xfb/~L{\x996GQ\x80\xf29/.gz\x014\xdf\xfe\xf9\xb8j\x894tr\xb0\xf28{{"x3',
        b'\x1c\xd4q\xc9cM!\x8dGlw\xe1\x82\xf8\x0e\xa7\x91\xa0\x11B\xff,\xc3\xfe\x18\xc9\xf7_\xb2]\xaf\xf9\xe8\xefnm{\xbb\x06GY\n\xd18k~gy3\x8aDZ\x06\x08j\xaa\x17FP\x92\xd0\x0bKnw<c\x0c\xf55t\x9dY\x984tQ\x80\xf2)/;\x00\x0fE\x1e\xf7\x07\xe0wY\x996F@\x82\xd4OKz">E\xf4aQ\xd9\xc8j\x88\'Gc\xe4\xb3(=\x0cE\x1ds',
        b'\x1e\xd4q\xc9cM m?\x8c/\xed\x81\xf7\xdbG\x9b\xf2\x83J#/\xf3\r\x9f\xad\xf9\\\x10b\xe3\xf9\xe8\xefnm\xd1\x11\xac\xec\xd1\x90\xf28k~TX7\x8aDZ\x06\x08Y\x985dA\x92\xd1)/>v-g\x0c\xf55t\x9d{\x984dP\xc4\xb3\n\x1e+"-c\x1e\xf7\x07\xe0wY\xbb\x04tc\xf4\xb6|h\\E\x0fE\xf4aQ\xd9\xc8j\xaa\x17G@\xc4\xa6}/:\x11\rc',
        b'!\xd4q\xc9cM\xd2\xcd?\xc8Tc\xe1\xf4<J\x9cB\x81\xa0\xb2\xeas\x0ec_\xbe\x9c\x11Q@\xf3\xed\xc3\x08\x10S\x1b\xdd \xfb#S\x08\x1c\xa3_= \xbf\xa5\xf5\x83\xd2\x99&\xe1|\xb6.\xfa\xb3\xd2\x9b6D\xbc\xdd\xae,\xff\xf3\xfd\x14\x9c\x8b\xdd\xa8\xfd\xdf\xb3\xfd\x19\xddvY\xaf\x07>[\x8dI\x93\x8f\x19\xaf\x0b\x15%\rI\x96(\x04]\x165W\xf7\xed\x01\x8f\x13]\x16\x0e@U\xad\x01\xaf'
    ]

    encoded_call = pad(callsign.encode(), 10)

    messages = ["YSFD".encode() + encoded_call + encoded_call + pad("ALL".encode(), 10) + d for d in payloads]

    for i in range(0, len(messages)):
        data = messages[i]
        ysffich.decode(data[40:])
        fn = ysffich.getFN()
        dt = ysffich.getDT()

        if fn == 1 and dt == DT.VD2:
            payload = bytearray(data[35:])
            src = f"TG{tg}".ljust(10).encode()
            ysfpayload.writeVDMmode2Data(payload, src)
            data = data[:35] + payload
            messages[i] = data

        sock.sendto(messages[i], client_addr)
